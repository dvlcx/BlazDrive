@inject AuthenticationStateProvider _authStateProvider
@inject IMemoryCache _cache
 <nav class="navbar bg-body-tertiary container-fluid p-2 justify-content-between">
        <a class="navbar-brand" href="/">Navbar</a>
        <form class="d-flex" role="search">
              <div class="input-group">
            <input class="form-control" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success" type="submit">Search</button>
              </div>
        </form>
            <AuthorizeView>
                <Authorized>
                    <div class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" role="button" data-bs-toggle="dropdown" >
                            <img src="data:image;base64,@_avatar" width="40" height="40" class="rounded-circle">
                        </a>
                        <ul class="dropdown-menu  dropdown-menu-end">
                            <li><a class="dropdown-item" href="/settings">Settings</a></li>
                            <li><a class="dropdown-item" href="#">Something else here</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="/logout">Log Out</a></li>
                        </ul>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div>
                        <a href="/login" class="btn btn-primary">Log In</a>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
    </nav>

    @code
    {
            private string? _avatar { get; set; } = null;
            protected override async Task OnInitializedAsync() 
            {
                var state = await _authStateProvider.GetAuthenticationStateAsync();
                if(!state.User.Identity.IsAuthenticated) return;
                var key = state.User.FindFirstValue("AvatarKey");
                _avatar = _cache.Get(Guid.Parse(key))?.ToString();
            }
    }        
