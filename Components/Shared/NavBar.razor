@inject AuthenticationStateProvider _authStateProvider
@inject AccountInfoService _accountInfoService
@inject IMemoryCache _cache

 <nav class="navbar  container-fluid p-2 justify-content-between" style="@Style" >
        <a class="navbar-brand @TextClass" href="/">
            <img src="Images/logo.png" width="70px" style=" margin-top: -20px; margin-bottom: -15px;"/>
            BlazDrive
        </a>
        <AuthorizeView>
            <Authorized>
                <form class="d-flex" role="search">
                    <div class="input-group"> 
                        <input class="form-control" type="search" placeholder="Search" aria-label="Search">
                        <button class="btn btn-outline-success" type="submit">Search</button>
                    </div>
                </form> 
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" role="button" data-bs-toggle="dropdown" >
                        <img src="data:image;base64,@_avatar" width="40" height="40" class="rounded-circle">
                    </a>
                    <ul class="dropdown-menu  dropdown-menu-end">
                        <li><a class="dropdown-item" href="/settings">Settings</a></li>
                        <li><a class="dropdown-item" href="/links">Shared Links</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="/logout">Log Out</a></li>
                    </ul>
                </div>
            </Authorized>
            <NotAuthorized>
                <div>
                    <a href="/login" class="btn btn-primary">Log In</a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>

    @code
    {
        [Parameter]
        public string? Style {get; set;}
        [Parameter]
            public string? TextClass {get; set;}
            private string _avatar { get; set; }
            protected override async Task OnInitializedAsync() 
            {
                var state = await _authStateProvider.GetAuthenticationStateAsync();
                if(!state.User.Identity.IsAuthenticated) return;
                
                _avatar = await _accountInfoService.GetAvatar();
            }
    }        
