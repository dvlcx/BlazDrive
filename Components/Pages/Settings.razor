@page "/settings"
@layout MainLayout
@rendermode InteractiveServer

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject AuthenticationStateProvider _authStateProvider
@inject IMemoryCache _cache
@inject AccountEditService _accountEditService

<PageTitle>Settings</PageTitle>
<EditForm Model="_userEditInput" OnValidSubmit="SaveChangesClick">

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10 col-xl-8 mx-auto">
            <h2 class="h3 mb-4 page-title text-center">Settings</h2>
            <div class="my-4 ">
                        <div class="col text-center mb-25">
                                <div class="edit-thumb-box ">
                                    <label class=" rounded-circle" style="display: inline-block; height: 150px; width: 150px; position: relative" for="avatarUpload">
                                        <div class="edit-thumb-box-overlay"for="avatarUpload" ></div>
                                        <img src="data:image;base64,@_avatar" width="150" height="150" class="rounded-circle" />
                                    </label>
                                </div>
                                <InputFile id="avatarUpload" OnChange="@LoadFiles" hidden/>

                        </div>
                <form>
                    <hr class="my-4" />
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="firstname">Name</label>
                            <input type="text" id="firstname" class="form-control" placeholder="@_name" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="inputEmail4">Email</label>
                        <input type="email" class="form-control" id="inputEmail4" placeholder="@_email" />
                    </div>
                    <div class="form-group">
                    </div>
                    <hr class="my-4" />
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="inputPassword4">Old Password</label>
                                <input type="password" class="form-control" id="inputPassword5" />
                            </div>
                            <div class="form-group">
                                <label for="inputPassword5">New Password</label>
                                <input type="password" class="form-control" id="inputPassword5" />
                            </div>
                            <div class="form-group">
                                <label for="inputPassword6">Confirm Password</label>
                                <input type="password" class="form-control" id="inputPassword6" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-2">Password requirements</p>
                            <p class="small text-muted mb-2">To create a new password, you have to meet all of the following requirements:</p>
                            <ul class="small text-muted pl-4 mb-0">
                                <li>Minimum 6 character</li>
                                <li>At least one special character</li>
                                <li>At least one number</li>
                            </ul>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>
</EditForm>
@code
{
    
    private UserEditInput _userEditInput { get; set; } = new();
    private string? _name { get; set; }
    private string? _email { get; set; }
    private string? _avatar { get; set; } = null;
    protected override async Task OnInitializedAsync()
    {
        var state = await _authStateProvider.GetAuthenticationStateAsync();
        if(!state.User.Identity.IsAuthenticated) return;

        var key = state.User.FindFirstValue("AvatarKey");
        _avatar = _cache.Get(Guid.Parse(key))?.ToString();

        _name = state.User.Identity.Name;
        _email = state.User.FindFirstValue(ClaimTypes.Email);
    }

    private async Task SaveChangesClick()
    {

    }    
    private void LoadFiles(InputFileChangeEventArgs e)
    {
        var x = 3;
    }
}