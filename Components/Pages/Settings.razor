@page "/settings"
@layout MainLayout
@rendermode InteractiveServer

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject AuthenticationStateProvider _authStateProvider
@inject IMemoryCache _cache
@inject AccountEditService _accountEditService
@inject NavigationManager _navigationManager

<PageTitle>Settings</PageTitle>

<EditForm Model="_userEditInput" OnValidSubmit="SaveChangesClick">
<div class="container">
   <div class="row justify-content-center">
      <div class="col-12 col-lg-10 col-xl-8 mx-auto">
         <h2 class="h3 mb-4 page-title text-center">Settings</h2>
         <div class="my-4 ">
            <div class="col text-center mb-25">
               <div class="edit-thumb-box ">
                  <label class=" rounded-circle" style="display: inline-block; height: 150px; width: 150px; position: relative" for="avatarUpload">
                     <div class="edit-thumb-box-overlay"for="avatarUpload" ></div>
                     <img src="data:image;base64,@_avatar" width="150" height="150" class="rounded-circle" />
                  </label>
               </div>
               <InputFile id="avatarUpload" OnChange="@LoadFiles"  accept=".jpg,.jpeg,.png" hidden/>
            </div>
            <DataAnnotationsValidator />
            <hr class="my-4" />
            <div class="form-row">
               <div class="form-group col-md-6">
                  <label for="firstname">Name</label>
                  <InputText @bind-Value=_userEditInput.NewName id="firstname" class="form-control" />
                  <ValidationMessage For="() => _userEditInput.NewName" />
               </div>
            </div>
            <div class="form-group">
               <label>Email</label>
               <InputText @bind-Value=_userEditInput.NewEmail class="form-control" />
               <ValidationMessage For="() => _userEditInput.NewEmail" />
            </div>
            <div class="form-group">
            </div>
            <hr class="my-4" />
            <div class="row mb-4">
               <div class="col-md-6">
                  <div class="form-group">
                     <label for="inputPassword4">Old Password</label>
                     <InputText type="password" @bind-Value=_userEditInput.OldPassword class="form-control" />
                     <ValidationMessage For="() => _userEditInput.OldPassword" />
                  </div>
                  <div class="form-group">
                     <label for="inputPassword5">New Password</label>
                     <InputText type="password" @bind-Value=_userEditInput.NewPassword class="form-control" />
                     <ValidationMessage For="() => _userEditInput.NewPassword" />
                  </div>
                  <div class="form-group">
                     <label for="inputPassword6">Confirm Password</label>
                     <InputText type="password" @bind-Value=_userEditInput.NewPassword2 class="form-control" />
                     <ValidationMessage For="() => _userEditInput.NewPassword2" />
                  </div>
               </div>
               <div class="col-md-6">
                  <p class="mb-2">Password requirements</p>
                  <p class="small text-muted mb-2">To create a new password, you have to meet all of the following requirements:</p>
                  <ul class="small text-muted pl-4 mb-0">
                     <li>Minimum 6 character</li>
                     <li>At least one special character</li>
                     <li>At least one number</li>
                  </ul>
               </div>
            </div>
            <button class="btn btn-primary">Save Changes</button>
         </div>
      </div>
   </div>
</div>
</EditForm>


@code
{
    
   private UserEditInput _userEditInput { get; set; } = new();
   private string _avatar { get; set; } = null;
   private byte[] _newAvatar { get; set; } = null;
   private string _id { get; set; } = string.Empty;
   protected override async Task OnInitializedAsync()
   {
      var state = await _authStateProvider.GetAuthenticationStateAsync();
      if(!state.User.Identity.IsAuthenticated) return;

      _id = state.User.FindFirstValue("Id") + "";

      var key = state.User.FindFirstValue("AvatarKey");
      _avatar = _cache.Get(Guid.Parse(key))?.ToString();
   
      
      _userEditInput.NewName = state.User.Identity.Name;
      _userEditInput.NewEmail = state.User.FindFirstValue(ClaimTypes.Email);
   }

   private async Task SaveChangesClick()
   {
      await _accountEditService.EditAccountAsync(_id, _userEditInput.NewName, _userEditInput.NewEmail, _userEditInput.NewPassword);
   }    
   private async Task LoadFiles(InputFileChangeEventArgs e)
   {
      Guid key;
      using (var ms = new MemoryStream())
      {
         await e.File.OpenReadStream().CopyToAsync(ms);
         var br = ms.ToArray();
         _avatar = Convert.ToBase64String(br);
         key = await _accountEditService.EditAvatarAsync(_id, br);
      }
      _navigationManager.NavigateTo($"/re-login/{key}");

   }
}